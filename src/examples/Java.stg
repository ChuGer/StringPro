group Java;

program(globals,functions) ::= <<
import java.io.*;
import java.util.ArrayList;
import java.util.List;
class Wrapper {
    <globals; separator="\n">
    <functions; separator="\n">
}
>>

variable(type,name) ::=  << 
<type> <name; separator=", ">;
>>

args(args) ::=  <<<args; separator=", "> >>


globalVariable ::= variable

fun_decl(type,name,args,locals,stats) ::= <<
<type> <name>(<args; separator=", ">) {
    <locals; separator="\n">
    <stats; separator="\n">
}
>>

main_decl(locals={$slist::locals}, stats={$slist::stats}) ::= <<
  public static void main(String[] args) throws Exception {
    <locals; separator="\n">
    <stats; separator="\n">
  }
>>

type_int() ::= "int"

type_char() ::= "char"

type_string() ::= "String"

type_user_object(name) ::= "<name>"

parameter(type,name) ::= "<type> <name>"

statement(expr) ::= "<expr>;"

statementList(locals,stats) ::= <<
{
    <locals; separator="\n">
    <stats; separator="\n">
}<\n>
>>

for_op(count,locals,stats) ::= <<
for (int i = 0 ; i < <count> ; i++) {
    <locals; separator="\n">
    <stats; separator="\n">
}
>>

for_list_op (type, id, listId, locals, stats) ::= <<
for (<type> <id> : <listId>) {
    <locals; separator="\n">
    <stats; separator="\n">
}  
>>
            
while_op(bool_cond,locals,stats) ::= <<
while (<bool_cond>) {
    <locals; separator="\n">
    <stats; separator="\n">
}
>>

if_else_op(bool_cond,locals,stats,else_block) ::= <<
if (<bool_cond>) {
    <locals; separator="\n">
    <stats; separator="\n">
} <else_block>
>>

else_block(locals, stats) ::= <<
 else {
	<locals; separator="\n">
	<stats; separator="\n">    
}
>>

listInit(name,params) ::= <<List <name> = new ArrayList();
<params>
>>
listParam(listName,val) ::= <<<listName>.add(<val>);

>> 

assign(lhs,rhs) ::= "<lhs> = <rhs>"

equals(left,right) ::= "<left> == <right>"

lessThan(left,right) ::= "<left> \< <right>"

add(left,right) ::= "<left> + <right>"

addSign(left,sign,right) ::= "<left> <sign> <right>"

refVar(id) ::= "<id>"

iconst(value) ::= "<value>"

inbrac(value) ::= "(<value>)"

addExpr(sign,right) ::= "<sign><right>"

more() ::= ">"

less() ::= ">"

funCall(funName,funArgs) ::= <<<funName>(<funArgs>)>>

outOp(params) ::= <<System.out.println(<params>)>>
readOp() ::= <<System.in.read()>>